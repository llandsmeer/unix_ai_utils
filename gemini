#!/usr/bin/env python3

from urllib.parse import urlencode
import sys
import requests
import json
import subprocess
import re
import os


def secret():
    try:
        with open(os.path.expanduser('~/.gemini_secret'), 'rt') as f:
            key = f.read().strip()
            return key
    except IOError:
        print('failed to load ~/.groq_secret')
        exit(1)

url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent"
params = {"key": secret() }
headers = {"Content-Type": "application/json"}
prelude = '''You are an expert programmer/coder. You will answer the next question kindly and as correct and concise as possible. Your output is a *single* code snippet, wihout the surrounding markdown backticks. Do not use comments, unless absolutely neccesairy. Use four-space indents. Keep it correct and modern, when in doubt use python3. Generate the shortest possible code that hits the requirements and nothing more. Remember, do not every return anything else than a single code snippet. Never write text, only code.
\nThis is the question:
'''

def get_prompt(argv, context):
    prompt = prelude + ' '.join(argv)
    if context:
        prompt += '\n\nYour task is to modify the following code:\n\n```python\n' + context + '\n```'
    return prompt

def remove_markdown_code_markers(s):
    return re.sub(r'^```[a-z]*$|```$', '', s.strip(), flags=re.MULTILINE).strip()

def copy_to_clipboard(text):
    subprocess.run('xsel -b', input=text.encode(), check=True, shell=True, stdout=subprocess.DEVNULL)

def remove_think(text):
    return re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL).strip()

def main():
    clipboard = len(sys.argv) >1 and sys.argv[1] == '-y'
    if clipboard:
        sys.argv.pop(1)
    argv = sys.argv[1:]
    context = sys.stdin.read().strip() if not sys.stdin.isatty() else False
    data = { "contents": [{ "parts":[{"text": get_prompt(argv, context)}] }]}
    url_with_params = url + '?' + urlencode(params)
    response = requests.post(url_with_params,  headers=headers, data=json.dumps(data))
    j = response.json()
    try:
        output = j['candidates'][0]['content']['parts'][0]['text']
    except Exception as ex:
        print(repr(ex))
        print(j)
        exit(1)

    output = remove_think(output)
    output = remove_markdown_code_markers(output)
    print(output)
    if clipboard:
        copy_to_clipboard(output)

    assert len(j['candidates'][0]['content']['parts']) == 1

if __name__ == "__main__":
    main()
